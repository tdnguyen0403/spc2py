#!/usr/bin/env python3
from spc import *
from spc.ccharts import *
from spc.sampledata import *

if __name__ == '__main__':
    # a = SPC(pistonrings, title='Chart 1') + CUSUM() + EWMA() + Rbar() + Rules()
    # print(a)
    # a_ = SPC(viscosity) + CUSUM() + EWMA() + MR() + Rules()
    # print(a_)
    # b_range = SPC(model_c4) + Xbar_Rbar(
    #     usl=30.1, lsl=29.8) + Rbar() + Rules()
    # print(b_range)
    # b_range_extended = SPC(model_c4) + Xbar_Rbar(calc_method='extended') + Rbar() + Rules()
    # print(b_range_extended)
    # c = SPC(viscosity) + I(calc_method='extended', usl=35, lsl=31, ax_format='percent') + MR() + Rules()
    # print(c)
    # c_ = SPC(viscosity) + I(calc_method='standard', usl=35, lsl=31) + MR() + Rules()
    # print(c_)
    # d = SPC(plastic) + TsquareSingle() + Rules()
    # print(d)
    # e = SPC(experiment) + Tsquare()
    # print(e)
    # f = SPC(mewma_example) + MEWMA() + Rules()
    # print(f)
    # g = SPC(sandbox) + PPrime(ax_format='percent') + Rules()
    # print(g)
    # h = SPC(inspection) + UPrime(ax_format='ppm') + Rules()
    # print(h)
    # i = SPC(inspection) + U(ax_format='percent') + Rules()
    # print(i)
    # j = SPC(sandbox) + P() + Rules()
    # print(j)
    # k = SPC(circuits) + NP() + Rules()
    # print(k)
    # l = SPC(canjuice) + C() + Rules()
    # print(l)
    # m = SPC(thickness) + IMRX() + IMRMR() + IMRR() + Rules()
    # print(m)
    # n = SPC(thickness) + IMRX() + IMRMR() + IMRStd() + Rules()
    # print(n)

    # test without argument

    # a = SPC(pistonrings) + CUSUM() + EWMA() + Rbar() + Rules()
    # print(a)
    # a_ = SPC(viscosity) + CUSUM() + EWMA() + MR() + Rules()
    # print(a_)
    # b_range = SPC(model_c4) + Xbar_Rbar() + Rbar() + Rules()
    # print(b_range)
    # b_range_extended = SPC(model_c4) + Xbar_Rbar() + Rbar() + Rules()
    # print(b_range_extended)
    # c = SPC(viscosity) + I() + MR() + Rules()
    # print(c)
    # c_ = SPC(viscosity) + I() + MR() + Rules()
    # print(c_)
    # d = SPC(plastic) + TsquareSingle() + Rules()
    # print(d)
    # e = SPC(experiment) + Tsquare()
    # print(e)
    # f = SPC(mewma_example) + MEWMA() + Rules()
    # print(f)
    # g = SPC(sandbox) + PPrime() + Rules()
    # print(g)
    # h = SPC(inspection) + UPrime() + Rules()
    # print(h)
    # i = SPC(inspection) + U() + Rules()
    # print(i)
    # j = SPC(sandbox) + P() + Rules()
    # print(j)
    # k = SPC(circuits) + NP() + Rules()
    # print(k)
    # l = SPC(canjuice) + C() + Rules()
    # print(l)
    # m = SPC(thickness) + IMRX() + IMRMR() + IMRR() + Rules()
    # print(m)
    # n = SPC(thickness) + IMRX() + IMRMR() + IMRStd() + Rules()
    # print(n)
    # p = SPC(thickness) + Xbar_Rbar(transform='split') + Rbar(transform='split') + Rules()
    # print(p)
    # p = SPC(thickness) + Xbar_Rbar(transform='split', split_size=4) + Rbar(transform='split', split_size=4) + Rules()
    # print(p)
    # p = SPC(thickness) + Xbar_Rbar(transform='split', split_size=8) + Rbar(transform='split', split_size=5) + Rules()
    # print(p)
    # p = SPC(chemical) + Xbar_Rbar(transform='split', split_size=5) + Rbar(transform='split', split_size=5) + Rules()
    # print(p)
    # p = SPC(chemical) + Xbar_Rbar(transform='split', split_size=4) + Rbar(transform='split', split_size=4) + Rules()
    # print(p)
    # p = SPC(thickness) + Xbar_Sbar(
    #     transform='split', split_size=10) + Sbar(transform='split', split_size=10) + Rules()
    # print(p)
    # p = SPC(thickness) + Xbar_Sbar(
    #     transform='split', split_size=11) + Sbar(transform='split', split_size=11) + Rules()
    # print(p)
    # p = SPC(model_c4_original) + Xbar_Sbar(
    #     transform='split', split_size=5) + Sbar(transform='split', split_size=5) + Rules()
    # print(p)
    # p = SPC(model_c4_original) + Xbar_Sbar(
    #     transform='split', split_size=10) + Sbar(transform='split', split_size=10) + Rules()
    # print(p)
    p = SPC(model_c4_original) + Xbar_Sbar(
        calc_method='extended', transform='split', split_size=10) + Sbar(
        transform='split', split_size=10) + Rules()
    print(p)
